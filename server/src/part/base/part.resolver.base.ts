/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePartArgs } from "./CreatePartArgs";
import { UpdatePartArgs } from "./UpdatePartArgs";
import { DeletePartArgs } from "./DeletePartArgs";
import { PartCountArgs } from "./PartCountArgs";
import { PartFindManyArgs } from "./PartFindManyArgs";
import { PartFindUniqueArgs } from "./PartFindUniqueArgs";
import { Part } from "./Part";
import { Packet } from "../../packet/base/Packet";
import { PartService } from "../part.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Part)
export class PartResolverBase {
  constructor(
    protected readonly service: PartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "read",
    possession: "any",
  })
  async _partsMeta(
    @graphql.Args() args: PartCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Part])
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "read",
    possession: "any",
  })
  async parts(@graphql.Args() args: PartFindManyArgs): Promise<Part[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Part, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "read",
    possession: "own",
  })
  async part(@graphql.Args() args: PartFindUniqueArgs): Promise<Part | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Part)
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "create",
    possession: "any",
  })
  async createPart(@graphql.Args() args: CreatePartArgs): Promise<Part> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        packet: args.data.packet
          ? {
              connect: args.data.packet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Part)
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "update",
    possession: "any",
  })
  async updatePart(@graphql.Args() args: UpdatePartArgs): Promise<Part | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          packet: args.data.packet
            ? {
                connect: args.data.packet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Part)
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "delete",
    possession: "any",
  })
  async deletePart(@graphql.Args() args: DeletePartArgs): Promise<Part | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Packet, {
    nullable: true,
    name: "packet",
  })
  @nestAccessControl.UseRoles({
    resource: "Packet",
    action: "read",
    possession: "any",
  })
  async resolveFieldPacket(
    @graphql.Parent() parent: Part
  ): Promise<Packet | null> {
    const result = await this.service.getPacket(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
